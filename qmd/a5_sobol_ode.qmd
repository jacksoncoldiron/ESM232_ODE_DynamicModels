---
title: "Sobol with an OBE"
author: "Jackson Coldiron and Kaitlin Castor"
editor: visual
format: 
  html:
    code-fold: true
    embed-resources: true
    theme: sandstone
    toc: false
execute:
  freeze: auto 
  warning: false
  message: false
---

## Introduction

## Model Implementation

```{r}
# Load required libraries
library(tidyverse)
library(deSolve)
library(sensitivity)
library(here)
```

#### Model Run

```{r}
# Bring in the model
source(here("R","forestgrowth.R"))

# Set the parameters
tm <- seq(from = 1, to = 300)
Pinitial <- 10
gps <- list(thres = 50, K = 250, r = 0.01, g = 2)
res <- ode(Pinitial, tm, forest, gps)
colnames(res) <- c("time", "carbon")

```

#### Results with No Uncertainty

```{r}
#| fig-width: 10
#| fig-cap: "__Figure 1: Growth in Forest Size Over 300 Years with No Uncertainty __: Holding the parameters fixed with given values, forest growth in terms of kilograms of Carbon is shown over 300 years. Forest size grows exponetially until it reaches the canopy closure threshold at 50 kg C. Then growth follows a linear model based on a carrying capacity of 250 kg C."

# Graph the results with a line signally carrying capacity
no_uncert <- ggplot(as.data.frame(res), aes(time, carbon)) +
  geom_point() +
  labs(x = "Time (years)",
       y = "Forest Size (kg C)") +
  theme_minimal()

no_uncert
```

## Sensitivity Analysis

```{r}
# Set distributions for parameters
# Assume parameters are normally distributed with a sd of 10% of mean value
np <- 1000

r <- rnorm(mean = 0.01, sd = 0.1 * 0.01, n = np)
g <- rnorm(mean = 2, sd = 0.1 * 2, n = np)
K <- rnorm(mean = 250, sd = 0.1 * 250, n = np)
thres <- rnorm(mean = 50, sd = 0.1 * 50, n = np)

# Input sample parameters into a df
X1 <- cbind.data.frame(r, g, K, thres)

# Sobol requires two sets of sample parameters
# Repeat sampling
r <- rnorm(mean = 0.01, sd = 0.1 * 0.01, n = np)
g <- rnorm(mean = 2, sd = 0.1 * 2, n = np)
K <- rnorm(mean = 250, sd = 0.1 * 250, n = np)
thres <- rnorm(mean = 50, sd = 0.1 * 50, n = np)

# Input sample parameters into a df
X2 <- cbind.data.frame(r, g, K, thres)
```

#### Sobol

```{r}
# Create a sobol object and get sets of parameters for running the model
sens_forest <- sobolSalt(model = NULL, X1, X2, nboot = 300)
colnames(sens_forest$X) <- c("r", "g", "K", "thres")

# Define the metric function
metric <- function(res) {
  max <- max(res$carbon)
  return(list(max = max))
}

# Use a wrapper function to return just the map
p_wrapper <- function(r, g, K, thres, Pinitial, simtimes, func, metric) {
  parms <- list(r = r, K = K, g = g, thres = thres)
  result <- ode(y = Pinitial, times = simtimes, func = func, parms = parms)
  result <- as.data.frame(result)
  colnames(result) <- c("time", "carbon")
  # get metrics
  metrics <- metric(as.data.frame(result))
  return(metrics$max)
}

# Run the model with the parameters
allresults <- as.data.frame(sens_forest$X) |>
  pmap(p_wrapper, Pinitial = Pinitial, simtimes = tm, func = forest, metric = metric)
```

#### Visualize Results

```{r}
#extract results from pmap for a data frame
allres <- allresults |> map_dfr(`[`, c("maxconc"))
#allres <- allresults %>% map_dfr(`[`)



#create a boxplot
#tmp <- allres %>% pivot_longer(cols = everything(), names_to = "metric", values_to = "value")
#ggplot(tmp, aes(metric, value, col = metric)) +
 # geom_boxplot()

#compute the sobol indices for each metric
```

## Discussion
